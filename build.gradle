import java.time.Instant

plugins {
  id 'java'
  id 'java-library'
  id 'idea'
  id 'maven-publish'
  id 'signing'
  id "com.palantir.git-version"
  id 'io.freefair.lombok'

  // Code quality
  id 'checkstyle'
  id "com.github.spotbugs"
  id 'org.owasp.dependencycheck'
}

// Specify the versions of our dependencies
configure(allprojects) {
  project ->
    ext {
      // External libraries
      lombokVersion = '1.18.28'
      mockitoVersion = '4.5.1'
      slf4jVersion = '2.0.7'
    }
}

group = 'com.pippsford'

if (
    versionDetails().branchName ==~ /^(master)|(release.*)|(patch.*)$/
        && versionDetails().isCleanTag
        && gitVersion() ==~ /^\d+(\.\d+)+(-.+)?$/
) {
  project.version = gitVersion()
} else {
  project.version = '100-SNAPSHOT'
}

repositories {
  // Maven local only for our own snapshot builds
  mavenLocal {
    content {
      snapshotsOnly()
      includeGroupAndSubgroups('io.setl')
      includeGroupAndSubgroups('io.ledgerswarm')
    }
  }

  // check central repository
  mavenCentral()

  // check ledger swarm specific repository
  maven {
    url = 'https://maven.pkg.github.com/ledger-swarm/maven-repo'
    credentials {
      username = "$githubUser"
      password = "$githubToken"
    }
  }
}

checkstyle {
  toolVersion = "10.13.0"
  configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

// Do not perform checkstyle checks on test code
checkstyleTest {
  enabled = false
}

spotbugs {
  excludeFilter = rootProject.file('config/spotbugs/spotbugs-exclude.xml')
}

spotbugsMain {
  reports {
    html {
      required = true
    }
    xml {
      required = false
    }
  }
}

// Do not perform spotbugs analysis on test code
spotbugsTest {
  enabled = false
}

// Guava conflict with checkstyle plugin.
configurations.checkstyle {
  resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
    select("com.google.guava:guava:0")
  }
}

dependencies {
  implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.1.0'
  implementation group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: '3.0.0'

  implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '4.29.2'
  implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '4.29.2'

  implementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.11.4'

  testCompileOnly group:'org.projectlombok', name: 'lombok', version: lombokVersion
  testImplementation platform('org.junit:junit-bom:5.10.0')
  testImplementation 'org.junit.jupiter:junit-jupiter'
}

java {
  withJavadocJar()
  withSourcesJar()
}

javadoc {
  // Exclude generated code and test code from javadoc
  source = sourceSets.main.allJava.filter { !(it.path.contains('/generated/') || it.path.contains('/src/test/')) }
  options.addStringOption('Xdoclint:none', '-quiet')
  failOnError = false
}

compileJava {
  options.compilerArgs << '-parameters'
  options.compilerArgs << '-Xlint:deprecation'
}

compileTestJava {
  options.compilerArgs << '-parameters'
}

tasks.register('writeBuildProperties', WriteProperties) {
  destinationFile = layout.buildDirectory.file("build.properties")
  property("project.name", project.name)
  property("project.group", project.group)
  property("project.version", project.version)
  property("buildTime", Instant.now())

  pluginManager.withPlugin("com.palantir.git-version") {
    def gitDetails = versionDetails()
    property("git.lastTag", gitDetails.lastTag)
    property("git.commitDistance", gitDetails.commitDistance)
    property("git.gitHash", gitDetails.gitHash)
    property("git.gitHashFull", gitDetails.gitHashFull)
    property("git.branchName", gitDetails.branchName)
    property("git.isCleanTag", gitDetails.isCleanTag)
  }
}

jar {
  dependsOn writeBuildProperties
  from(layout.buildDirectory.file("build.properties")) {
    include "build.properties"
    into "META-INF"
  }
}

test {
  useJUnitPlatform()
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

artifacts {
  archives javadocJar, sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = project.name
      from components.java
      pom {
        name = 'BeanTester'
        packaging = 'jar'
        // optionally artifactId can be defined here
        description = 'A utility for generating and testing Java Beans'
        url = 'https://github.com/simon-greatrix/beantester.git'

        scm {
          connection = 'scm:git:https://github.com/simon-greatrix/beantester.git'
          developerConnection = 'scm:git:https://github.com/simon-greatrix/beantester.git'
          url = 'https://github.com/simon-greatrix/beantester.git'
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'simon-greatrix'
            name = 'Simon Greatrix'
            email = 'simon@pippsford.com'
            organization = ''
            organizationUrl = ''
          }
        }
      }
    }
  }
  repositories {
    maven {
      name = 'file'
      url = layout.buildDirectory.dir('repository')
    }
  }
}

signing {
  useGpgCmd()
  sign publishing.publications.mavenJava
}

tasks.register("createCentralZip", Zip) {
  dependsOn tasks.named("publishMavenJavaPublicationToFileRepository")
  from layout.buildDirectory.dir("repository")
  destinationDirectory = layout.buildDirectory.dir("publications")
  archiveFileName = "central.zip"
}
